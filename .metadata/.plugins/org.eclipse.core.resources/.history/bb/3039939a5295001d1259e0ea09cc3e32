package controller;

import java.io.IOException;
import java.util.ArrayList;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import model.Database;
import model.HistoricalItem;
import model.TrieuDai;

public class TrieuDaiCrawler extends Crawler{
	private String originalUrl;
	private String subUrl;
	
	public TrieuDaiCrawler() {
		super();
		originalUrl = "https://thuvienlichsu.com"; 
	}
	
	public String getOriginalUrl() {
		return originalUrl;
	}

	public void setOriginalUrl(String originalUrl) {
		this.originalUrl = originalUrl;
	}

	@Override
	public Elements listElementCard(String url, String elmClass) throws IOException {
		Document document = Jsoup.connect(url).get(); 
		Elements elms = document.getElementsByClass(elmClass);
		return elms;
	}
	
	@Override
	public Document getSubPage(Element element) throws IOException {
		Element link = element.getElementsByTag("a").first();
		this.subUrl = link.absUrl("href");
		Document documentSubPage = Jsoup.connect(this.subUrl).get();
		return documentSubPage;
	}
	
	public HistoricalItem getData(Document documentSubPage) throws IOException {
		//crawl inside the subpage to get data
		String title = documentSubPage.getElementsByTag("h1").text();
		//get begin and end year from title
		ArrayList<String> date = this.getBeginEndYear(title);
		String beginYear = date.get(0);
		String endYear = date.get(1);
		Elements suKienCard = this.listElementCard(this.subUrl, "divide-content");
		suKienCard.forEach((element) -> {
			try {
				Document documentSuKienPage = this.getSubPage(element);
//				HistoricalItem data = this.getDataSuKienPage(documentSuKienPage);
				this.getDataSuKienPage(documentSuKienPage);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		});
		
		
		System.out.println(title + " " + beginYear + " " +endYear);
		TrieuDai item = new TrieuDai(title, beginYear, endYear);
		return item;
	}
	
	public void getDataSuKienPage(Document documentSuKienPage) {
		Elements elms = this.getHeaderCard(documentSuKienPage);
		elms.forEach((headerCard) ->{
			
		});
	}
	
	public Elements getHeaderCards(Document documentSuKienPage) {
		Elements elms = documentSuKienPage.getElementsByClass("card mb-3");
		return elms;
	}
	
	public Elements getInnerDataCard(Element headerCard) {
		
	}
	
	public Element getCategoryHeaderCard(String title, Elements headerCards) {
		final Element sastifiedCard = new Element(null);
		headerCards.forEach((headerCard) ->{
			if(this.checkCategoryHeaderCard(title, headerCard) == true) {
				sastifiedCard = headerCard;
			}
		});
		return sastifiedCard;
		
	}
	
	public boolean checkCategoryHeaderCard(String title, Element headerCard) {
		String headerTitle = headerCard.getElementsByClass("header-edge").text();
		
	}
	
	public static void main(String[] args) throws IOException {
		//TEST
		TrieuDaiCrawler crawler = new TrieuDaiCrawler();
		Elements cardElements = crawler.listElementCard(crawler.getOriginalUrl() + "/thoi-ky", "divide-content");
		Database db = new Database();
		cardElements.forEach((element) -> {
			try {
				Document documentSubPage = crawler.getSubPage(element);
				HistoricalItem data = crawler.getData(documentSubPage);
				db.addData(data.createJSON());
				
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		});
		db.saveData("src/model/output.json");
		//System.out.println(cardElements);
	}
}
